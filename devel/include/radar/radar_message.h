// Generated by gencpp from file radar/radar_message.msg
// DO NOT EDIT!


#ifndef RADAR_MESSAGE_RADAR_MESSAGE_H
#define RADAR_MESSAGE_RADAR_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radar
{
template <class ContainerAllocator>
struct radar_message_
{
  typedef radar_message_<ContainerAllocator> Type;

  radar_message_()
    : start_time()
    , num(0.0)
    , data()  {
    }
  radar_message_(const ContainerAllocator& _alloc)
    : start_time()
    , num(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef float _num_type;
  _num_type num;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::radar::radar_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar::radar_message_<ContainerAllocator> const> ConstPtr;

}; // struct radar_message_

typedef ::radar::radar_message_<std::allocator<void> > radar_message;

typedef boost::shared_ptr< ::radar::radar_message > radar_messagePtr;
typedef boost::shared_ptr< ::radar::radar_message const> radar_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar::radar_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar::radar_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar::radar_message_<ContainerAllocator1> & lhs, const ::radar::radar_message_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.num == rhs.num &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar::radar_message_<ContainerAllocator1> & lhs, const ::radar::radar_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar::radar_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar::radar_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar::radar_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar::radar_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar::radar_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar::radar_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar::radar_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d156b01ce488aed0a9757f924f4b8e0";
  }

  static const char* value(const ::radar::radar_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d156b01ce488aedULL;
  static const uint64_t static_value2 = 0x0a9757f924f4b8e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar::radar_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar/radar_message";
  }

  static const char* value(const ::radar::radar_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar::radar_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start_time\n"
"float32 num\n"
"float64[] data\n"
"\n"
;
  }

  static const char* value(const ::radar::radar_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar::radar_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.num);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar::radar_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar::radar_message_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "num: ";
    Printer<float>::stream(s, indent + "  ", v.num);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MESSAGE_RADAR_MESSAGE_H
